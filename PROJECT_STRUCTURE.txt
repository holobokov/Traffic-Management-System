================================================================================
        TRAFFIC MANAGEMENT SYSTEM - STRUKTURA PROJEKTU
================================================================================

Data utworzenia: 2025-10-31
Autor: System zarządzania ruchem drogowym
Cel: Projekt edukacyjny z dziedziczeniem i polimorfizmem


================================================================================
        OBECNE KLASY (JUŻ ZAIMPLEMENTOWANE)
================================================================================

✓ Intersection.java      - Klasa reprezentująca skrzyżowanie
✓ TrafficLights.java     - Klasa sygnalizacji świetlnej  
✓ Main.java              - Klasa główna

ENUMY:
✓ Direction              - Kierunki: north, south, east, west
✓ Light                  - Stany świateł: green, yellow, red
✓ WorkingMode            - Tryby pracy: auto, manual, emergency


================================================================================
        FUNKCJE SYSTEMU - CO MOŻE ROBIĆ UŻYTKOWNIK
================================================================================

📋 MENU GŁÓWNE:

1. 🚦 ZARZĄDZANIE SKRZYŻOWANIAMI
   ├─ Dodaj nowe skrzyżowanie
   ├─ Usuń skrzyżowanie
   ├─ Wyświetl wszystkie skrzyżowania
   └─ Edytuj skrzyżowanie (ID, nazwa, lokalizacja)

2. 🚗 ZARZĄDZANIE POJAZDAMI
   ├─ Dodaj pojazd (Car, Bus, Truck, Ambulance, etc.)
   ├─ Usuń pojazd
   ├─ Wyświetl wszystkie pojazdy
   └─ Przepuść pojazd przez skrzyżowanie (POLIMORFIZM!)

3. 💡 ZARZĄDZANIE ŚWIATŁAMI
   ├─ Zmień stan światła (czerwone/żółte/zielone)
   ├─ Zmień tryb pracy (auto/manual/emergency)
   └─ Wyświetl status świateł na skrzyżowaniu

4. 🎛️ KONTROLERY RUCHU
   ├─ Przypisz kontroler do skrzyżowania
   ├─ Zmień typ kontrolera (manual/timed/smart)
   └─ Uruchom automatyczny cykl świateł (POLIMORFIZM!)

5. 📊 STATYSTYKI I MONITORING
   ├─ Liczba pojazdów oczekujących
   ├─ Średni czas przejazdu
   └─ Raport aktywności

0. Wyjście z programu


================================================================================
        HIERARCHIA 1: VEHICLE (POJAZDY)
================================================================================

SCHEMAT DZIEDZICZENIA:

Vehicle (klasa bazowa)
│
├── Car                  - Samochód osobowy
├── Bus                  - Autobus miejski
├── Truck                - Ciężarówka
├── Motorcycle           - Motocykl
│
└── EmergencyVehicle (klasa pośrednia)
    ├── Ambulance        - Karetka
    ├── FireTruck        - Wóz strażacki
    └── PoliceCar        - Radiowóz policyjny


KLASA BAZOWA: Vehicle
---------------------
POLA:
- id (String)                    - Unikalny identyfikator
- priority (int)                 - Priorytet (1-10)
- speed (double)                 - Prędkość km/h
- length (double)                - Długość pojazdu w metrach
- currentLocation (String)       - Aktualna lokalizacja

METODY:
- getPriority()                  - Zwraca priorytet
- move()                         - Logika ruchu
- getInfo()                      - Informacje o pojeździe


PODKLASY I ICH SPECYFICZNE POLA:
--------------------------------

Car (extends Vehicle):
- passengers (int)               - Liczba pasażerów
- priority = 1                   - Niski priorytet

Bus (extends Vehicle):
- capacity (int)                 - Pojemność
- currentPassengers (int)        - Aktualna liczba pasażerów
- priority = 3                   - Średni priorytet (transport publiczny!)

Truck (extends Vehicle):
- cargoWeight (double)           - Waga ładunku w kg
- priority = 2                   - Niski-średni priorytet

Motorcycle (extends Vehicle):
- priority = 1                   - Niski priorytet

EmergencyVehicle (extends Vehicle):
- sirenActive (boolean)          - Czy syrena włączona
- emergencyType (String)         - Typ: "Medical", "Fire", "Police"
- priority = 10                  - NAJWYŻSZY PRIORYTET!
- move() @Override               - Specjalne zachowanie z syreną

Ambulance (extends EmergencyVehicle):
- hasPatient (boolean)           - Czy ma pacjenta

FireTruck (extends EmergencyVehicle):
- waterCapacity (int)            - Pojemność wody w litrach

PoliceCar (extends EmergencyVehicle):
- inPursuit (boolean)            - Czy w pościgu


POLIMORFIZM W VEHICLE:
---------------------
- ArrayList<Vehicle> może zawierać wszystkie typy
- vehicle.getPriority() zwraca różne wartości (1, 2, 3, 10)
- vehicle.move() zachowuje się różnie dla EmergencyVehicle
- Intersection.processVehicle(Vehicle v) traktuje każdy typ INACZEJ!


================================================================================
        HIERARCHIA 2: TRAFFICCONTROLLER (KONTROLER RUCHU)
================================================================================

SCHEMAT DZIEDZICZENIA:

TrafficController (klasa bazowa)
│
├── ManualController     - Sterowanie ręczne przez operatora
├── TimedController      - Sterowanie czasowe (stały cykl)
└── SmartController      - Sterowanie inteligentne (AI)


KLASA BAZOWA: TrafficController
--------------------------------
POLA:
- id (String)                    - ID kontrolera
- intersection (Intersection)    - Skrzyżowanie którym zarządza
- cycleTime (int)                - Czas pełnego cyklu w sekundach

METODY:
- updateLights()                 - Aktualizuje światła (POLIMORFIZM!)
- handleEmergency(EmergencyVehicle) - Obsługa pojazdu ratunkowego
- getStatus()                    - Status kontrolera


PODKLASY I ICH SPECYFIKA:
------------------------

ManualController (extends TrafficController):
POLA:
- waitingForInput (boolean)      - Czy czeka na decyzję operatora

METODY @Override:
- updateLights()                 - NIE zmienia automatycznie, czeka na input

ZASTOSOWANIE: Awarie, specjalne sytuacje, małe skrzyżowania


TimedController (extends TrafficController):
POLA:
- greenDuration (int)            - Czas zielonego (np. 30s)
- yellowDuration (int)           - Czas żółtego (np. 3s)
- redDuration (int)              - Czas czerwonego (np. 27s)

METODY @Override:
- updateLights()                 - Zmienia według stałego czasu

ZASTOSOWANIE: Standardowe skrzyżowania, przewidywalny ruch


SmartController (extends TrafficController):
POLA:
- vehicleThreshold (int)         - Próg liczby pojazdów (np. 10)
- trafficDensity (Map)           - Gęstość ruchu na każdym kierunku

METODY @Override:
- updateLights()                 - Analizuje ruch, dostosowuje czas dynamicznie
- handleEmergency()              - Zaawansowana reakcja (czyszczenie trasy)

ZASTOSOWANIE: Centrum miasta, ruchliwe skrzyżowania, godziny szczytu


POLIMORFIZM W TRAFFICCONTROLLER:
--------------------------------
- ArrayList<TrafficController> z różnymi typami
- controller.updateLights() działa INACZEJ dla każdego typu:
  * Manual → czeka na człowieka
  * Timed → zmienia co X sekund
  * Smart → analizuje i optymalizuje
- Ten sam interfejs, różne strategie!


================================================================================
        CO KONTROLER ROBI (SZCZEGÓŁY)
================================================================================

KONTROLER = "MÓZG" SKRZYŻOWANIA

ZADANIA:
1. Automatycznie zmienia światła
2. Decyduje który kierunek ma zielone
3. Reaguje na pojazdy ratunkowe
4. Optymalizuje przepływ (Smart)

PRZYKŁAD DZIAŁANIA:

BEZ KONTROLERA:
- Światła się nie zmieniają
- Wszystko stoi w miejscu
- Użytkownik musi ręcznie zmieniać każde światło

Z TimedController:
- 00:00 → North: GREEN (30s)
- 00:30 → North: YELLOW (3s)  
- 00:33 → North: RED, South: GREEN (30s)
- 01:03 → South: YELLOW (3s)
- 01:06 → South: RED, East: GREEN (30s)
- Cykl się powtarza automatycznie!

Z SmartController:
- Wykrywa: North = 15 pojazdów, South = 3 pojazdy
- Decyzja: Dam North 45s zamiast 30s
- Optymalizacja: Zmniejsza korki!
- Jeśli karetka → natychmiast wszystkie ZIELONE!


================================================================================
        PRZYKŁADOWE UŻYCIE PROGRAMU
================================================================================

SCENARIUSZ 1: Podstawowe działanie
-----------------------------------

UŻYTKOWNIK:
1. Uruchamia program
2. Dodaje skrzyżowanie "Marszałkowska x Królewska"
3. Dodaje pojazdy:
   - Car "CAR-001"
   - Bus "BUS-174" 
   - Ambulance "AMB-911"
4. Przypisuje SmartController do skrzyżowania
5. Uruchamia "Przepuść pojazdy"

WYJŚCIE:
=== TRAFFIC MANAGEMENT SYSTEM ===

Processing Vehicle: CAR-001
├─ Type: Car
├─ Priority: 1
└─ Action: Normal flow ✓

Processing Vehicle: BUS-174
├─ Type: Bus
├─ Priority: 3
└─ Action: Public transport priority - extending green light 🚌

Processing Vehicle: AMB-911
├─ Type: Ambulance  
├─ Priority: 10
├─ Siren: ACTIVE
└─ Action: EMERGENCY! All lights GREEN 🚨

Smart Controller: Optimizing traffic flow...
✓ Green light extended for high-priority vehicles


SCENARIUSZ 2: Porównanie kontrolerów (POLIMORFIZM!)
----------------------------------------------------

UŻYTKOWNIK:
1. Tworzy to samo skrzyżowanie
2. Testuje 3 różne kontrolery

WYJŚCIE:
=== CONTROLLER COMPARISON ===

ManualController:
⚙️  Status: Waiting for operator input
Action: No automatic changes

TimedController:
⏱️  Status: Running 30-second cycle
Action: North GREEN (30s) → YELLOW (3s) → RED

SmartController:
🧠 Status: Analyzing traffic density
📊 North: 12 vehicles, South: 5 vehicles
Action: Prioritizing North direction (+15s)


SCENARIUSZ 3: Pojazd ratunkowy
-------------------------------

WYJŚCIE:
🚨 EMERGENCY ALERT! 🚨
Ambulance AMB-911 approaching intersection

Smart Controller Response:
├─ Detecting emergency vehicle
├─ Clearing all traffic
├─ Setting all lights to GREEN for ambulance route
└─ Emergency vehicle passed safely ✓

Resuming normal operation...


================================================================================
        ZALETY STRUKTURY PROJEKTU
================================================================================

✅ DZIEDZICZENIE (2-3 poziomy):
   - Vehicle → Car, Bus, EmergencyVehicle → Ambulance
   - TrafficController → Manual, Timed, Smart
   - Kod wielokrotnego użytku

✅ POLIMORFIZM:
   - ArrayList<Vehicle> z różnymi typami
   - Każdy pojazd obsługiwany według priorytetu
   - Kontrolery z różnymi strategiami

✅ BEZ KLAS ABSTRAKCYJNYCH:
   - Wszystkie klasy bazowe są normalne
   - Zgodne z wymaganiami projektu

✅ REALISTYCZNY SYSTEM:
   - Odzwierciedla rzeczywisty ruch drogowy
   - Łatwy do rozbudowy
   - Praktyczne zastosowanie OOP


================================================================================
        KOLEJNOŚĆ IMPLEMENTACJI (SUGESTIA)
================================================================================

KROK 1: Podstawy Vehicle
├─ Vehicle (klasa bazowa)
├─ Car
├─ Bus
└─ Test w Main.java

KROK 2: Pojazdy ratunkowe
├─ EmergencyVehicle
├─ Ambulance
└─ Test polimorfizmu (priorytet!)

KROK 3: Integracja z Intersection
├─ Dodaj processVehicle() w Intersection
└─ Test różnych typów pojazdów

KROK 4: Kontrolery
├─ TrafficController (bazowa)
├─ TimedController
├─ SmartController
└─ Test polimorfizmu kontrolerów

KROK 5: Finalizacja
├─ Menu główne
├─ Wszystkie funkcje
└─ Testy końcowe


================================================================================
        DODATKOWE POMYSŁY (OPCJONALNIE)
================================================================================

💡 Jeśli będzie czas:
- Sensor (VehicleCountSensor, SpeedSensor)
- Road (Highway, CityRoad, LocalRoad)
- Statistics (szczegółowe raporty)
- Symulacja czasu (godziny szczytu)


================================================================================
